"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@vercel";
exports.ids = ["vendor-chunks/@vercel"];
exports.modules = {

/***/ "(rsc)/../../node_modules/@vercel/edge-config/dist/index.js":
/*!************************************************************!*\
  !*** ../../node_modules/@vercel/edge-config/dist/index.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   clone: () => (/* binding */ clone3),\n/* harmony export */   createClient: () => (/* binding */ createClient),\n/* harmony export */   digest: () => (/* binding */ digest),\n/* harmony export */   get: () => (/* binding */ get),\n/* harmony export */   getAll: () => (/* binding */ getAll),\n/* harmony export */   has: () => (/* binding */ has),\n/* harmony export */   parseConnectionString: () => (/* binding */ parseConnectionString),\n/* harmony export */   setTracerProvider: () => (/* binding */ setTracerProvider)\n/* harmony export */ });\n/* harmony import */ var _vercel_edge_config_fs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @vercel/edge-config-fs */ \"node:fs/promises\");\n// src/index.ts\n\n\n// package.json\nvar name = \"@vercel/edge-config\";\nvar version = \"1.4.0\";\n\n// src/utils/tracing.ts\nvar edgeConfigTraceSymbol = Symbol.for(\"@vercel/edge-config:global-trace\");\nfunction setTracerProvider(tracer) {\n  Reflect.set(globalThis, edgeConfigTraceSymbol, tracer);\n}\nfunction getTracer() {\n  const maybeTraceApi = Reflect.get(globalThis, edgeConfigTraceSymbol);\n  return maybeTraceApi == null ? void 0 : maybeTraceApi.getTracer(name, version);\n}\nfunction isPromise(p) {\n  return p !== null && typeof p === \"object\" && \"then\" in p && typeof p.then === \"function\";\n}\nfunction trace(fn, options = {\n  name: fn.name\n}) {\n  const traced = function(...args) {\n    const tracer = getTracer();\n    if (!tracer) return fn.apply(this, args);\n    const shouldTrace = process.env.EDGE_CONFIG_TRACE_VERBOSE === \"true\" || options.isVerboseTrace === false;\n    if (!shouldTrace) return fn.apply(this, args);\n    return tracer.startActiveSpan(options.name, (span) => {\n      if (options.attributes) span.setAttributes(options.attributes);\n      try {\n        const result = fn.apply(this, args);\n        if (isPromise(result)) {\n          result.then((value) => {\n            if (options.attributesSuccess) {\n              span.setAttributes(\n                options.attributesSuccess(\n                  value\n                )\n              );\n            }\n            span.setStatus({ code: 1 });\n            span.end();\n          }).catch((error) => {\n            if (options.attributesError) {\n              span.setAttributes(options.attributesError(error));\n            }\n            span.setStatus({\n              code: 2,\n              // 2 = Error\n              message: error instanceof Error ? error.message : void 0\n            });\n            span.end();\n          });\n        } else {\n          if (options.attributesSuccess) {\n            span.setAttributes(options.attributesSuccess(result));\n          }\n          span.setStatus({ code: 1 });\n          span.end();\n        }\n        return result;\n      } catch (error) {\n        if (options.attributesError) {\n          span.setAttributes(options.attributesError(error));\n        }\n        span.setStatus({\n          code: 2,\n          // 2 = Error\n          message: error instanceof Error ? error.message : void 0\n        });\n        span.end();\n        throw error;\n      }\n    });\n  };\n  return traced;\n}\n\n// src/utils/index.ts\nvar ERRORS = {\n  UNAUTHORIZED: \"@vercel/edge-config: Unauthorized\",\n  EDGE_CONFIG_NOT_FOUND: \"@vercel/edge-config: Edge Config not found\"\n};\nvar UnexpectedNetworkError = class extends Error {\n  constructor(res) {\n    super(\n      `@vercel/edge-config: Unexpected error due to response with status code ${res.status}`\n    );\n  }\n};\nfunction hasOwnProperty(obj, prop) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}\nfunction pick(obj, keys) {\n  const ret = {};\n  keys.forEach((key) => {\n    ret[key] = obj[key];\n  });\n  return ret;\n}\nfunction assertIsKey(key) {\n  if (typeof key !== \"string\") {\n    throw new Error(\"@vercel/edge-config: Expected key to be a string\");\n  }\n}\nfunction isEmptyKey(key) {\n  return key.trim() === \"\";\n}\nfunction assertIsKeys(keys) {\n  if (!Array.isArray(keys) || keys.some((key) => typeof key !== \"string\")) {\n    throw new Error(\n      \"@vercel/edge-config: Expected keys to be an array of string\"\n    );\n  }\n}\nvar clone = trace(\n  function clone2(value) {\n    if (typeof structuredClone === \"function\") return structuredClone(value);\n    if (value === void 0) return value;\n    return JSON.parse(JSON.stringify(value));\n  },\n  { name: \"clone\" }\n);\nfunction parseVercelConnectionStringFromUrl(text) {\n  try {\n    const url = new URL(text);\n    if (url.host !== \"edge-config.vercel.com\") return null;\n    if (url.protocol !== \"https:\") return null;\n    if (!url.pathname.startsWith(\"/ecfg\")) return null;\n    const id = url.pathname.split(\"/\")[1];\n    if (!id) return null;\n    const token = url.searchParams.get(\"token\");\n    if (!token || token === \"\") return null;\n    return {\n      type: \"vercel\",\n      baseUrl: `https://edge-config.vercel.com/${id}`,\n      id,\n      version: \"1\",\n      token\n    };\n  } catch {\n    return null;\n  }\n}\nfunction parseConnectionFromQueryParams(text) {\n  try {\n    if (!text.startsWith(\"edge-config:\")) return null;\n    const params = new URLSearchParams(text.slice(12));\n    const id = params.get(\"id\");\n    const token = params.get(\"token\");\n    if (!id || !token) return null;\n    return {\n      type: \"vercel\",\n      baseUrl: `https://edge-config.vercel.com/${id}`,\n      id,\n      version: \"1\",\n      token\n    };\n  } catch {\n  }\n  return null;\n}\nfunction parseExternalConnectionStringFromUrl(connectionString) {\n  try {\n    const url = new URL(connectionString);\n    let id = url.searchParams.get(\"id\");\n    const token = url.searchParams.get(\"token\");\n    const version2 = url.searchParams.get(\"version\") || \"1\";\n    if (!id || url.pathname.startsWith(\"/ecfg_\")) {\n      id = url.pathname.split(\"/\")[1] || null;\n    }\n    if (!id || !token) return null;\n    url.search = \"\";\n    return {\n      type: \"external\",\n      baseUrl: url.toString(),\n      id,\n      token,\n      version: version2\n    };\n  } catch {\n    return null;\n  }\n}\nfunction parseConnectionString(connectionString) {\n  return parseConnectionFromQueryParams(connectionString) || parseVercelConnectionStringFromUrl(connectionString) || parseExternalConnectionStringFromUrl(connectionString);\n}\n\n// src/utils/fetch-with-cached-response.ts\nfunction createResponse(cachedResponseEntry) {\n  return new Response(cachedResponseEntry.response, {\n    headers: {\n      ...cachedResponseEntry.headers,\n      Age: String(\n        // age header may not be 0 when serving stale content, must be >= 1\n        Math.max(1, Math.floor((Date.now() - cachedResponseEntry.time) / 1e3))\n      )\n    },\n    status: cachedResponseEntry.status\n  });\n}\nfunction createHandleStaleIfError(cachedResponseEntry, staleIfError) {\n  return function handleStaleIfError(response) {\n    switch (response.status) {\n      case 500:\n      case 502:\n      case 503:\n      case 504:\n        return typeof staleIfError === \"number\" && cachedResponseEntry.time < Date.now() + staleIfError * 1e3 ? createResponse(cachedResponseEntry) : response;\n      default:\n        return response;\n    }\n  };\n}\nfunction createHandleStaleIfErrorException(cachedResponseEntry, staleIfError) {\n  return function handleStaleIfError(reason) {\n    if (typeof staleIfError === \"number\" && cachedResponseEntry.time < Date.now() + staleIfError * 1e3) {\n      return createResponse(cachedResponseEntry);\n    }\n    throw reason;\n  };\n}\nvar cache = /* @__PURE__ */ new Map();\nfunction extractStaleIfError(cacheControlHeader) {\n  if (!cacheControlHeader) return null;\n  const matched = /stale-if-error=(?<staleIfError>\\d+)/i.exec(\n    cacheControlHeader\n  );\n  return (matched == null ? void 0 : matched.groups) ? Number(matched.groups.staleIfError) : null;\n}\nvar fetchWithCachedResponse = trace(\n  async function fetchWithCachedResponse2(url, options = {}) {\n    const { headers: customHeaders = new Headers(), ...customOptions } = options;\n    const authHeader = customHeaders.get(\"Authorization\");\n    const cacheKey = `${url},${authHeader || \"\"}`;\n    const cachedResponseEntry = cache.get(cacheKey);\n    if (cachedResponseEntry) {\n      const { etag: etag2, response: cachedResponse } = cachedResponseEntry;\n      const headers = new Headers(customHeaders);\n      headers.set(\"If-None-Match\", etag2);\n      const staleIfError = extractStaleIfError(headers.get(\"Cache-Control\"));\n      const res2 = await fetch(url, {\n        ...customOptions,\n        headers\n      }).then(\n        createHandleStaleIfError(cachedResponseEntry, staleIfError),\n        createHandleStaleIfErrorException(cachedResponseEntry, staleIfError)\n      );\n      if (res2.status === 304) {\n        res2.cachedResponseBody = JSON.parse(cachedResponse);\n        return res2;\n      }\n      const newETag = res2.headers.get(\"ETag\");\n      if (res2.ok && newETag)\n        cache.set(cacheKey, {\n          etag: newETag,\n          response: await res2.clone().text(),\n          headers: Object.fromEntries(res2.headers.entries()),\n          status: res2.status,\n          time: Date.now()\n        });\n      return res2;\n    }\n    const res = await fetch(url, options);\n    const etag = res.headers.get(\"ETag\");\n    if (res.ok && etag) {\n      cache.set(cacheKey, {\n        etag,\n        response: await res.clone().text(),\n        headers: Object.fromEntries(res.headers.entries()),\n        status: res.status,\n        time: Date.now()\n      });\n    }\n    return res;\n  },\n  {\n    name: \"fetchWithCachedResponse\",\n    attributesSuccess(result) {\n      return {\n        status: result.status\n      };\n    }\n  }\n);\n\n// src/index.ts\nvar jsonParseCache = /* @__PURE__ */ new Map();\nvar readFileTraced = trace(_vercel_edge_config_fs__WEBPACK_IMPORTED_MODULE_0__.readFile, { name: \"readFile\" });\nvar jsonParseTraced = trace(JSON.parse, { name: \"JSON.parse\" });\nvar privateEdgeConfigSymbol = Symbol.for(\"privateEdgeConfig\");\nvar cachedJsonParseTraced = trace(\n  (edgeConfigId, content) => {\n    const cached = jsonParseCache.get(edgeConfigId);\n    if (cached) return cached;\n    const parsed = jsonParseTraced(content);\n    jsonParseCache.set(edgeConfigId, Object.freeze(parsed));\n    return parsed;\n  },\n  { name: \"cached JSON.parse\" }\n);\nvar getFileSystemEdgeConfig = trace(\n  async function getFileSystemEdgeConfig2(connection) {\n    if (connection.type !== \"vercel\") return null;\n    if (!process.env.AWS_LAMBDA_FUNCTION_NAME) return null;\n    try {\n      const content = await readFileTraced(\n        `/opt/edge-config/${connection.id}.json`,\n        \"utf-8\"\n      );\n      return cachedJsonParseTraced(\n        connection.id,\n        content\n      );\n    } catch {\n      return null;\n    }\n  },\n  {\n    name: \"getFileSystemEdgeConfig\"\n  }\n);\nvar getPrivateEdgeConfig = trace(\n  async function getPrivateEdgeConfig2(connection) {\n    const privateEdgeConfig = Reflect.get(\n      globalThis,\n      privateEdgeConfigSymbol\n    );\n    if (typeof privateEdgeConfig === \"object\" && typeof privateEdgeConfig.get === \"function\") {\n      return privateEdgeConfig.get(connection.id);\n    }\n    return null;\n  },\n  {\n    name: \"getPrivateEdgeConfig\"\n  }\n);\nfunction createGetInMemoryEdgeConfig(shouldUseDevelopmentCache, connection, headers, fetchCache) {\n  let embeddedEdgeConfigPromise = null;\n  let latestRequest = null;\n  return trace(\n    (localOptions) => {\n      if ((localOptions == null ? void 0 : localOptions.consistentRead) || !shouldUseDevelopmentCache)\n        return Promise.resolve(null);\n      if (!latestRequest) {\n        latestRequest = fetchWithCachedResponse(\n          `${connection.baseUrl}/items?version=${connection.version}`,\n          {\n            headers: new Headers(headers),\n            cache: fetchCache\n          }\n        ).then(async (res) => {\n          const digest2 = res.headers.get(\"x-edge-config-digest\");\n          let body;\n          if (!res.ok) {\n            await consumeResponseBody(res);\n            body = res.cachedResponseBody;\n            if (!body) return null;\n          } else {\n            body = await res.json();\n          }\n          return { digest: digest2, items: body };\n        });\n        latestRequest.then(\n          (resolved) => {\n            embeddedEdgeConfigPromise = Promise.resolve(resolved);\n            latestRequest = null;\n          },\n          // Attach a `.catch` handler to this promise so that if it does throw,\n          // we don't get an unhandled promise rejection event. We unset the\n          // `latestRequest` so that the next call will make a new request.\n          () => {\n            embeddedEdgeConfigPromise = null;\n            latestRequest = null;\n          }\n        );\n      }\n      if (!embeddedEdgeConfigPromise) {\n        embeddedEdgeConfigPromise = latestRequest;\n      }\n      return embeddedEdgeConfigPromise;\n    },\n    {\n      name: \"getInMemoryEdgeConfig\"\n    }\n  );\n}\nfunction addConsistentReadHeader(headers) {\n  headers.set(\"x-edge-config-min-updated-at\", `${Number.MAX_SAFE_INTEGER}`);\n}\nasync function getLocalEdgeConfig(connection, options) {\n  if (options == null ? void 0 : options.consistentRead) return null;\n  const edgeConfig = await getPrivateEdgeConfig(connection) || await getFileSystemEdgeConfig(connection);\n  return edgeConfig;\n}\nasync function consumeResponseBody(res) {\n  await res.arrayBuffer();\n}\nvar createClient = trace(\n  function createClient2(connectionString, options = {\n    staleIfError: 604800,\n    cache: \"no-store\"\n  }) {\n    if (!connectionString)\n      throw new Error(\"@vercel/edge-config: No connection string provided\");\n    const connection = parseConnectionString(connectionString);\n    if (!connection)\n      throw new Error(\n        \"@vercel/edge-config: Invalid connection string provided\"\n      );\n    const edgeConfigId = connection.id;\n    const baseUrl = connection.baseUrl;\n    const version2 = connection.version;\n    const headers = {\n      Authorization: `Bearer ${connection.token}`\n    };\n    if (typeof process !== \"undefined\" && process.env.VERCEL_ENV)\n      headers[\"x-edge-config-vercel-env\"] = process.env.VERCEL_ENV;\n    if (typeof name === \"string\" && typeof version === \"string\")\n      headers[\"x-edge-config-sdk\"] = `${name}@${version}`;\n    if (typeof options.staleIfError === \"number\" && options.staleIfError > 0)\n      headers[\"cache-control\"] = `stale-if-error=${options.staleIfError}`;\n    const fetchCache = options.cache || \"no-store\";\n    const shouldUseDevelopmentCache = !options.disableDevelopmentCache && \"development\" === \"development\" && process.env.EDGE_CONFIG_DISABLE_DEVELOPMENT_SWR !== \"1\";\n    const getInMemoryEdgeConfig = createGetInMemoryEdgeConfig(\n      shouldUseDevelopmentCache,\n      connection,\n      headers,\n      fetchCache\n    );\n    const api = {\n      get: trace(\n        async function get2(key, localOptions) {\n          const localEdgeConfig = await getInMemoryEdgeConfig(localOptions) || await getLocalEdgeConfig(connection, localOptions);\n          assertIsKey(key);\n          if (isEmptyKey(key)) return void 0;\n          if (localEdgeConfig) {\n            return Promise.resolve(localEdgeConfig.items[key]);\n          }\n          const localHeaders = new Headers(headers);\n          if (localOptions == null ? void 0 : localOptions.consistentRead)\n            addConsistentReadHeader(localHeaders);\n          return fetchWithCachedResponse(\n            `${baseUrl}/item/${key}?version=${version2}`,\n            {\n              headers: localHeaders,\n              cache: fetchCache\n            }\n          ).then(async (res) => {\n            if (res.ok) return res.json();\n            await consumeResponseBody(res);\n            if (res.status === 401) throw new Error(ERRORS.UNAUTHORIZED);\n            if (res.status === 404) {\n              if (res.headers.has(\"x-edge-config-digest\")) return void 0;\n              throw new Error(ERRORS.EDGE_CONFIG_NOT_FOUND);\n            }\n            if (res.cachedResponseBody !== void 0)\n              return res.cachedResponseBody;\n            throw new UnexpectedNetworkError(res);\n          });\n        },\n        { name: \"get\", isVerboseTrace: false, attributes: { edgeConfigId } }\n      ),\n      has: trace(\n        async function has2(key, localOptions) {\n          const localEdgeConfig = await getInMemoryEdgeConfig(localOptions) || await getLocalEdgeConfig(connection, localOptions);\n          assertIsKey(key);\n          if (isEmptyKey(key)) return false;\n          if (localEdgeConfig) {\n            return Promise.resolve(hasOwnProperty(localEdgeConfig.items, key));\n          }\n          const localHeaders = new Headers(headers);\n          if (localOptions == null ? void 0 : localOptions.consistentRead)\n            addConsistentReadHeader(localHeaders);\n          return fetch(`${baseUrl}/item/${key}?version=${version2}`, {\n            method: \"HEAD\",\n            headers: localHeaders,\n            cache: fetchCache\n          }).then((res) => {\n            if (res.status === 401) throw new Error(ERRORS.UNAUTHORIZED);\n            if (res.status === 404) {\n              if (res.headers.has(\"x-edge-config-digest\")) return false;\n              throw new Error(ERRORS.EDGE_CONFIG_NOT_FOUND);\n            }\n            if (res.ok) return true;\n            throw new UnexpectedNetworkError(res);\n          });\n        },\n        { name: \"has\", isVerboseTrace: false, attributes: { edgeConfigId } }\n      ),\n      getAll: trace(\n        async function getAll2(keys, localOptions) {\n          const localEdgeConfig = await getInMemoryEdgeConfig(localOptions) || await getLocalEdgeConfig(connection, localOptions);\n          if (localEdgeConfig) {\n            if (keys === void 0) {\n              return Promise.resolve(localEdgeConfig.items);\n            }\n            assertIsKeys(keys);\n            return Promise.resolve(pick(localEdgeConfig.items, keys));\n          }\n          if (Array.isArray(keys)) assertIsKeys(keys);\n          const search = Array.isArray(keys) ? new URLSearchParams(\n            keys.filter((key) => typeof key === \"string\" && !isEmptyKey(key)).map((key) => [\"key\", key])\n          ).toString() : null;\n          if (search === \"\") return Promise.resolve({});\n          const localHeaders = new Headers(headers);\n          if (localOptions == null ? void 0 : localOptions.consistentRead)\n            addConsistentReadHeader(localHeaders);\n          return fetchWithCachedResponse(\n            `${baseUrl}/items?version=${version2}${search === null ? \"\" : `&${search}`}`,\n            {\n              headers: localHeaders,\n              cache: fetchCache\n            }\n          ).then(async (res) => {\n            if (res.ok) return res.json();\n            await consumeResponseBody(res);\n            if (res.status === 401) throw new Error(ERRORS.UNAUTHORIZED);\n            if (res.status === 404)\n              throw new Error(ERRORS.EDGE_CONFIG_NOT_FOUND);\n            if (res.cachedResponseBody !== void 0)\n              return res.cachedResponseBody;\n            throw new UnexpectedNetworkError(res);\n          });\n        },\n        { name: \"getAll\", isVerboseTrace: false, attributes: { edgeConfigId } }\n      ),\n      digest: trace(\n        async function digest2(localOptions) {\n          const localEdgeConfig = await getInMemoryEdgeConfig(localOptions) || await getLocalEdgeConfig(connection, localOptions);\n          if (localEdgeConfig) {\n            return Promise.resolve(localEdgeConfig.digest);\n          }\n          const localHeaders = new Headers(headers);\n          if (localOptions == null ? void 0 : localOptions.consistentRead)\n            addConsistentReadHeader(localHeaders);\n          return fetchWithCachedResponse(\n            `${baseUrl}/digest?version=${version2}`,\n            {\n              headers: localHeaders,\n              cache: fetchCache\n            }\n          ).then(async (res) => {\n            if (res.ok) return res.json();\n            await consumeResponseBody(res);\n            if (res.cachedResponseBody !== void 0)\n              return res.cachedResponseBody;\n            throw new UnexpectedNetworkError(res);\n          });\n        },\n        { name: \"digest\", isVerboseTrace: false, attributes: { edgeConfigId } }\n      )\n    };\n    return { ...api, connection };\n  },\n  {\n    name: \"createClient\"\n  }\n);\nvar defaultEdgeConfigClient;\nfunction init() {\n  if (!defaultEdgeConfigClient) {\n    defaultEdgeConfigClient = createClient(process.env.EDGE_CONFIG);\n  }\n}\nvar get = (...args) => {\n  init();\n  return defaultEdgeConfigClient.get(...args);\n};\nvar getAll = (...args) => {\n  init();\n  return defaultEdgeConfigClient.getAll(...args);\n};\nvar has = (...args) => {\n  init();\n  return defaultEdgeConfigClient.has(...args);\n};\nvar digest = (...args) => {\n  init();\n  return defaultEdgeConfigClient.digest(...args);\n};\nfunction clone3(edgeConfigValue) {\n  return JSON.parse(JSON.stringify(edgeConfigValue));\n}\n\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/@vercel/edge-config/dist/index.js\n");

/***/ })

};
;